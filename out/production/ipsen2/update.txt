
-- Author Victor
-- ADDRESS

CREATE TABLE IF NOT EXISTS Address (

    addressID SERIAL NOT NULL PRIMARY KEY,
    address VARCHAR(255) NOT NULL,
    zipCode VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL
);


-- Author Victor
-- CLIENT

CREATE SEQUENCE IF NOT EXISTS client_id_seq START 2000000;
CREATE TABLE IF NOT EXISTS Client (

    clientID INTEGER PRIMARY KEY NOT NULL DEFAULT NEXTVAL('client_id_seq'),
    clientAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    birthDate VARCHAR(255) NOT NULL,
    study VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255)
);



-- Author Victor
-- STUDENT

CREATE TABLE IF NOT EXISTS Student (

    studentID SERIAL PRIMARY KEY NOT NULL,
    userAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    birthDate VARCHAR(255) NOT NULL,
    study VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255)
    
);

-- Author Victor
-- COMPANY

CREATE SEQUENCE IF NOT EXISTS company_id_seq START 1000000;
CREATE TABLE IF NOT EXISTS Company (

    companyID INTEGER PRIMARY KEY NOT NULL DEFAULT NEXTVAL('company_id_seq'),
    companyAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    companyName VARCHAR(255) NOT NULL,
    contactPerson VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255),
    email VARCHAR(255)
);



-- Author Victor
-- DOCUMENT

CREATE TABLE IF NOT EXISTS Document (

    documentID SERIAL NOT NULL PRIMARY KEY,
    ownerIDClient INTEGER NULL REFERENCES Client (clientID),
    ownerIDStudent INTEGER NULL REFERENCES Student (studentID),
    ownerIDCompany INTEGER NULL REFERENCES Company (companyID),
    CONSTRAINT CK_User_Type CHECK (
         CASE WHEN ownerIDClient IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDStudent IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDCompany IS NULL THEN 0 ELSE 1 END = 1
    ),
    documentName VARCHAR(255) NOT NULL,
    date VARCHAR(255) NOT NULL
);


-- Author Victor
-- NOTE

CREATE TABLE IF NOT EXISTS Note (

    noteID SERIAL NOT NULL PRIMARY KEY,
    note TEXT NOT NULL,
    ownerIDClient INTEGER NULL REFERENCES Client (clientID),
    ownerIDStudent INTEGER NULL REFERENCES Student (studentID),
    ownerIDCompany INTEGER NULL REFERENCES Company (companyID),
         CONSTRAINT CK_User_Type CHECK (
             CASE WHEN ownerIDClient IS NULL THEN 0 ELSE 1 END +
             CASE WHEN ownerIDStudent IS NULL THEN 0 ELSE 1 END +
             CASE WHEN ownerIDCompany IS NULL THEN 0 ELSE 1 END = 1
        )
);


-- Author Victor
-- PROJECT

CREATE TABLE IF NOT EXISTS Project (

    projectID SERIAL NOT NULL PRIMARY KEY,
    projectName VARCHAR(255) NOT NULL,
    studentID INTEGER NULL REFERENCES Student (studentID),
    companyID INTEGER NULL REFERENCES Company (companyID),
    clientID INTEGER NULL REFERENCES Client (clientID),
    documentID INTEGER NULL REFERENCES Document (documentID),
    noteID INTEGER NULL REFERENCES Note (noteID)

);


-- Author Victor
-- TAG

CREATE TABLE IF NOT EXISTS Tag (

    tagName VARCHAR(255) NOT NULL PRIMARY KEY,
    ownerID INTEGER NOT NULL
);

-- Author Victor
-- CLIENT STUDENT RELATION


CREATE TABLE IF NOT EXISTS ClientStudentRelation (

    clientID INTEGER NOT NULL REFERENCES Client (clientID),
    studenID INTEGER NOT NULL REFERENCES Student (studentID),
    description TEXT
);

-- Author Victor
-- company STUDENT RELATION


CREATE TABLE IF NOT EXISTS CompanyStudentRelation (

    companyID INTEGER NOT NULL REFERENCES Company (companyID),
    studentID INTEGER NOT NULL REFERENCES Student (studentID),
    description TEXT
);

-- Author Victor
-- CLIENT COMPANY RELATION


CREATE TABLE IF NOT EXISTS ClientCompanyRelation (

    clientID INTEGER NOT NULL REFERENCES Client (clientID),
    companyID INTEGER NOT NULL REFERENCES Company (companyID),
    description TEXT
);

-- Author Victor
-- USER

CREATE TABLE IF NOT EXISTS Users (

    username VARCHAR(255) PRIMARY KEY NOT NULL,
    password VARCHAR(255) NOT NULL,
    privilege INTEGER NOT NULL,
    userIDClient INTEGER NULL REFERENCES Client (clientID),
    userIDStudent INTEGER NULL REFERENCES Student (studentID),
    userIDCompany INTEGER NULL REFERENCES Company (companyID),
    CONSTRAINT CK_User_Type CHECK (
        CASE WHEN userIDClient IS NULL THEN 0 ELSE 1 END +
        CASE WHEN userIDStudent IS NULL THEN 0 ELSE 1 END +
        CASE WHEN userIDCompany IS NULL THEN 0 ELSE 1 END = 1
        )
);
