
-- Author Victor
-- ADDRESS

CREATE TABLE IF NOT EXISTS Address (

    addressID SERIAL NOT NULL PRIMARY KEY,
    address VARCHAR(255) NOT NULL,
    zipCode VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL
);


-- Author Victor
-- STUDENT

CREATE TABLE IF NOT EXISTS Student (

    studentID SERIAL PRIMARY KEY NOT NULL,
    studentAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    birthDate VARCHAR(255) NOT NULL,
    study VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255)

);


-- Author Victor
-- COMPANY

CREATE TABLE IF NOT EXISTS Company (

    companyID SERIAL PRIMARY KEY NOT NULL,
    companyAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    companyName VARCHAR(255) NOT NULL,
    contactPerson VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255),
    email VARCHAR(255)
);


-- Author Victor
-- CLIENT


CREATE TABLE IF NOT EXISTS Client (

    clientID SERIAL PRIMARY KEY NOT NULL,
    clientAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    birthDate VARCHAR(255) NOT NULL,
    study VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255)
);



-- Author Roel
-- PROJECT

CREATE TABLE IF NOT EXISTS Project (
    projectID SERIAL PRIMARY KEY NOT NULL,
    studentID INTEGER NOT NULL REFERENCES Student (studentID),
    companyID INTEGER NOT NULL REFERENCES Company (companyID),
    clientID INTEGER NOT NULL REFERENCES Client (clientID),
    projectName VARCHAR(255)
);


-- Author Victor, Roel
-- DOCUMENT

CREATE TABLE IF NOT EXISTS Document (

    documentID SERIAL NOT NULL PRIMARY KEY,
    ownerIDClient INTEGER NULL REFERENCES Client (clientID),
    ownerIDStudent INTEGER NULL REFERENCES Student (studentID),
    ownerIDCompany INTEGER NULL REFERENCES Company (companyID),
    ownerIDProject INTEGER NULL REFERENCES Project (projectID),
    CONSTRAINT CK_User_Type CHECK (
         CASE WHEN ownerIDClient IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDStudent IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDCompany IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDProject IS NULL THEN 0 ELSE 1 END = 1
    ),
    documentName VARCHAR(255) NOT NULL,
    date VARCHAR(255) NOT NULL
);


-- Author Victor, Roel
-- NOTE

CREATE TABLE IF NOT EXISTS Note (

    noteID SERIAL NOT NULL PRIMARY KEY,
    note TEXT NOT NULL,
    ownerIDClient INTEGER NULL REFERENCES Client (clientID),
    ownerIDStudent INTEGER NULL REFERENCES Student (studentID),
    ownerIDCompany INTEGER NULL REFERENCES Company (companyID),
    ownerIDProject INTEGER NULL REFERENCES Project (projectID),
         CONSTRAINT CK_User_Type CHECK (
             CASE WHEN ownerIDClient IS NULL THEN 0 ELSE 1 END +
             CASE WHEN ownerIDStudent IS NULL THEN 0 ELSE 1 END +
             CASE WHEN ownerIDProject IS NULL THEN 0 ELSE 1 END +
             CASE WHEN ownerIDCompany IS NULL THEN 0 ELSE 1 END = 1
        )
);


-- Author Victor, Roel
-- PROJECT

CREATE TABLE IF NOT EXISTS Project (

    projectID SERIAL NOT NULL PRIMARY KEY,
    projectName VARCHAR(255) NOT NULL,
    studentID INTEGER NULL REFERENCES Student (studentID),
    companyID INTEGER NULL REFERENCES Company (companyID),
    clientID INTEGER NULL REFERENCES Client (clientID)

);


-- Author Victor, Roel
-- TAG

CREATE TABLE IF NOT EXISTS Tag (

    tagName VARCHAR(255) NOT NULL PRIMARY KEY,
    ownerIDClient INTEGER NULL REFERENCES Client (clientID),
    ownerIDStudent INTEGER NULL REFERENCES Student (studentID),
    ownerIDCompany INTEGER NULL REFERENCES Company (companyID),
    ownerIDProject INTEGER NULL REFERENCES Project (projectID),
    CONSTRAINT CK_User_Type CHECK (
         CASE WHEN ownerIDClient IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDStudent IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDCompany IS NULL THEN 0 ELSE 1 END +
         CASE WHEN ownerIDProject IS NULL THEN 0 ELSE 1 END = 1
    )
);


-- Author Victor
-- CLIENT STUDENT RELATION

CREATE TABLE IF NOT EXISTS ClientStudentRelation (

    clientID INTEGER NOT NULL REFERENCES Client (clientID),
    studenID INTEGER NOT NULL REFERENCES Student (studentID),
    description TEXT
);


-- Author Victor
-- company STUDENT RELATION

CREATE TABLE IF NOT EXISTS CompanyStudentRelation (

    companyID INTEGER NOT NULL REFERENCES Company (companyID),
    studentID INTEGER NOT NULL REFERENCES Student (studentID),
    description TEXT
);


-- Author Victor
-- CLIENT COMPANY RELATION

CREATE TABLE IF NOT EXISTS ClientCompanyRelation (

    clientID INTEGER NOT NULL REFERENCES Client (clientID),
    companyID INTEGER NOT NULL REFERENCES Company (companyID),
    description TEXT
);


-- Author Roel
-- STUDENT PROJECT RELATION

CREATE TABLE IF NOT EXISTS ClientProjectRelation (

    clientID INTEGER NOT NULL REFERENCES Student (studentID),
    projectID INTEGER NOT NULL REFERENCES Project (projectID),
    description TEXT
);


-- Author Roel
-- COMPANY PROJECT RELATION

CREATE TABLE IF NOT EXISTS CompanyProjectRelation (

    companyID INTEGER NOT NULL REFERENCES Company (companyID),
    projectID INTEGER NOT NULL REFERENCES Project (projectID),
    description TEXT
);

-- Author Roel
-- CLIENT PROJECT RELATION

CREATE TABLE IF NOT EXISTS StudentProjectRelation (

    studentID INTEGER NOT NULL REFERENCES Student (studentID),
    projectID INTEGER NOT NULL REFERENCES Project (projectID),
    description TEXT
);


-- Author Victor
-- ACCOUNT

CREATE TABLE IF NOT EXISTS Account (

    accountName VARCHAR(255) PRIMARY KEY NOT NULL,
    password VARCHAR(255) NOT NULL,
    privilege INTEGER NOT NULL,
    userIDClient INTEGER NULL REFERENCES Client (clientID),
    userIDStudent INTEGER NULL REFERENCES Student (studentID),
    userIDCompany INTEGER NULL REFERENCES Company (companyID),
    CONSTRAINT CK_User_Type CHECK (
        CASE WHEN userIDClient IS NULL THEN 0 ELSE 1 END +
        CASE WHEN userIDStudent IS NULL THEN 0 ELSE 1 END +
        CASE WHEN userIDCompany IS NULL THEN 0 ELSE 1 END = 1
        )
);
