-- Author Victor
-- ADDRESS

CREATE TABLE IF NOT EXISTS Address (

    addressID SERIAL NOT NULL PRIMARY KEY,
    address VARCHAR(255) NOT NULL,
    zipCode VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL
);


-- Author Victor
-- STUDENT
CREATE SEQUENCE IF NOT EXISTS id_seq_student START WITH	 1;
CREATE TABLE IF NOT EXISTS Student (

    id INTEGER DEFAULT nextval('id_seq_student') PRIMARY KEY NOT NULL,
    studentAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    birthDate VARCHAR(255) NOT NULL,
    study VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255),
    tag TEXT

);


-- Author Victor
-- COMPANY
CREATE SEQUENCE IF NOT EXISTS id_seq_company START WITH 1000000;
CREATE TABLE IF NOT EXISTS Company (

    id INTEGER DEFAULT nextval('id_seq_company') PRIMARY KEY NOT NULL,
    companyAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    companyName VARCHAR(255) NOT NULL,
    contactPerson VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255),
    email VARCHAR(255),
    tag TEXT
);


-- Author Victor
-- CLIENT

CREATE SEQUENCE IF NOT EXISTS id_seq_client START WITH 2000000;
CREATE TABLE IF NOT EXISTS Client (

    id INTEGER DEFAULT nextval('id_seq_client') PRIMARY KEY NOT NULL,
    clientAddressID INTEGER NOT NULL REFERENCES Address (addressID),
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    birthDate VARCHAR(255) NOT NULL,
    study VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(255),
    tag TEXT
);



-- Author Victor, Roel, Negin
-- PROJECT

CREATE SEQUENCE IF NOT EXISTS id_seq_project START WITH 3000000;
CREATE TABLE IF NOT EXISTS Project (
    projectID INTEGER DEFAULT nextval('id_seq_project') PRIMARY KEY NOT NULL,
    projectName VARCHAR(255) NOT NULL,
--    id INTEGER NOT NULL REFERENCES Student (id),
--    id INTEGER NOT NULL REFERENCES Company (id),
--    clientID  INTEGER NOT NULL REFERENCES Client (id),
   tag TEXT


    
);


-- Author Victor, Roel, Negin
-- DOCUMENT

CREATE TABLE IF NOT EXISTS Document (

    documentID SERIAL NOT NULL PRIMARY KEY,
    ownerID INTEGER NOT NULL,
    documentName VARCHAR(255) NOT NULL,
    documentDate VARCHAR(255) NOT NULL,
    pdffile bytea
);


-- Author Victor, Roel
-- NOTE

CREATE TABLE IF NOT EXISTS Note (

    noteID SERIAL NOT NULL PRIMARY KEY,
    note TEXT NOT NULL,
    ownerID INTEGER NOT NULL

);



-- Author Victor, Roel
-- TAG

--CREATE TABLE IF NOT EXISTS Tag (

--    tagName VARCHAR(255) NOT NULL PRIMARY KEY,
--    ownerID INTEGER NOT NULL
--);


-- Author Victor
-- CLIENT STUDENT RELATION

CREATE TABLE IF NOT EXISTS ClientStudentRelation (

    id INTEGER NOT NULL REFERENCES Client (id),
    studenID INTEGER NOT NULL REFERENCES Student (id),
    description TEXT
);


-- Author Victor
-- company STUDENT RELATION

CREATE TABLE IF NOT EXISTS CompanyStudentRelation (

--    id INTEGER NOT NULL REFERENCES Company (id),
--    id INTEGER NOT NULL REFERENCES Student (id),
    description TEXT
);


-- Author Victor
-- CLIENT COMPANY RELATION

CREATE TABLE IF NOT EXISTS ClientCompanyRelation (

--    id INTEGER NOT NULL REFERENCES Client (id),
--    id INTEGER NOT NULL REFERENCES Company (id),
    description TEXT
);


-- Author Roel
-- STUDENT PROJECT RELATION

CREATE TABLE IF NOT EXISTS ClientProjectRelation (

    id INTEGER NOT NULL REFERENCES Student (id),
    projectID INTEGER NOT NULL REFERENCES Project (projectID),
    description TEXT
);


-- Author Roel
-- COMPANY PROJECT RELATION

CREATE TABLE IF NOT EXISTS CompanyProjectRelation (

    id INTEGER NOT NULL REFERENCES Company (id),
    projectID INTEGER NOT NULL REFERENCES Project (projectID),
    description TEXT
);

-- Author Roel
-- CLIENT PROJECT RELATION

CREATE TABLE IF NOT EXISTS StudentProjectRelation (

    id INTEGER NOT NULL REFERENCES Student (id),
    projectID INTEGER NOT NULL REFERENCES Project (projectID),
    description TEXT
);


-- Author Victor
-- ACCOUNT

CREATE TABLE IF NOT EXISTS Account (

    accountName VARCHAR(255) PRIMARY KEY NOT NULL,
    password VARCHAR(255) NOT NULL,
    privilege INTEGER NOT NULL,
    userID INTEGER NOT NULL
);